{"version":3,"sources":["component/NewBird.jsx","component/BirdTable.jsx","component/birds.jpg","component/ImageBrowser.js","App.js","serviceWorker.js","index.js"],"names":["NewBird","useState","birds","setBirds","bird","setBird","setKey","id","baseurl","useEffect","fetch","then","response","status","json","data","console","log","catch","err","birdArray","Array","from","Object","keys","k","length","editBird","map","key","name","type","value","onChange","e","update","date","place","quantity","class","onClick","method","body","JSON","stringify","i","keynow","assign","target","newBirds","BirdTable","persons","setPersons","personArray","listPersons","person","ComponentName","props","year","src","Picture","alt","App","className","ImageBrowser","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caa964be.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n//note the bootstrap in public/index.html\r\nconst NewBird = () => {\r\n  //Reading two persons from Firebase\r\n  //enabling browsing between the records by <,>-buttons\r\n  //data like {\"avi\":{\"city\":\"Vaasa\",\"name\":\"Antti\",\"phone\":\"0401234567\"},\"tka\":{\"city\":\"Vaasa\",\"name\":\"Timo2\",\"phone\":\"0407677080\"}}\r\n  const [birds, setBirds] = useState({});\r\n  const [bird, setBird] = useState({});\r\n  const [key, setKey] = useState();\r\n  const [id, setId] = useState(0);\r\n  const baseurl = \"https://h2c-react-final-project-default-rtdb.firebaseio.com/birds.json\";\r\n  //Must use useEffect not to forever loop fetch\r\n  useEffect(() => {\r\n    fetch(baseurl)\r\n      .then(function(response) {\r\n        //response is plain encoded text\r\n        if (response.status !== 200) {\r\n          console.log(\r\n            \"Looks like there was a problem. Status Code: \" + response.status\r\n          );\r\n          return;\r\n        }\r\n        //convert text to json\r\n        response.json().then(function(data) {\r\n          setBirds(data);\r\n        });\r\n      })\r\n      .catch(function(err) {\r\n        console.log(\"Fetch Error : \", err);\r\n      });\r\n  }, []);\r\n  //Firebase data is key-value pairs not an array, here converting it first to array\r\n  const birdArray = Array.from(Object.keys(birds), k => birds[k]);\r\n  console.log(\"number: \" +birdArray.length);\r\n  const editBird = birdArray.map((bird, key) => {\r\n    if (key === id) {\r\n      return (\r\n        <div id=\"personDiv\">\r\n          Bird \r\n          <input\r\n            id=\"bird\"\r\n            name=\"bird\"\r\n            type=\"text\"\r\n            value={bird.bird}\r\n            onChange={e => update(e)}\r\n          />\r\n          <br />\r\n          Date \r\n          <input\r\n            id=\"date\"\r\n            name=\"date\"\r\n            type=\"date\"\r\n            value={bird.date}\r\n            onChange={e => update(e)}\r\n          />\r\n          <br />\r\n          Place \r\n          <input\r\n            id=\"place\"\r\n            name=\"place\"\r\n            type=\"text\"\r\n            value={bird.place}\r\n            onChange={e => update(e)}\r\n          />\r\n          <br />\r\n          Quantity \r\n          <input\r\n            id=\"quantity\"\r\n            name=\"quantity\"\r\n            type=\"number\"\r\n            value={bird.quantity}\r\n            onChange={e => update(e)}\r\n          />\r\n          <br />\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div class=\"card\">\r\n      <h2>Add new bird sigthing</h2>\r\n      <div class=\"card-body\">{editBird}</div>\r\n      <button onClick={save}>Save to database</button>\r\n      <p class=\"image\">Refresh page (press F5) if you are adding several sightings after each other!</p>\r\n         </div>\r\n  );\r\n\r\n\r\n  function update(e) {\r\n    //first need to find which person to update, current is id\r\n    //find the key of the record to be saved\r\n    let i = 0;\r\n    let keynow = null;\r\n    for (const key in birds) {\r\n      if (i === id) {\r\n        keynow = key;\r\n      }\r\n      i++;\r\n    }\r\n    //make a copy of the object in key-value list\r\n    let bird = Object.assign({}, birds[keynow]);\r\n    //update object value\r\n    bird[e.target.name] = e.target.value;\r\n    //copy the existing key-value list for editing\r\n    console.log(bird);\r\n    let newBirds = Object.assign({}, birds);\r\n    //overwrite one person data\r\n    newBirds[keynow] = bird;\r\n    //write the latest to persons list\r\n    setBirds(newBirds);\r\n    //for saving (later) to Firebase save the key ans person data\r\n    setKey(keynow);\r\n    setBird(bird);\r\n    //alert(\"This is the person :\" + JSON.stringify(person));\r\n  }\r\n\r\n  function save() {\r\n    \r\n    //find the url of the record to be saved\r\n    const url = baseurl;\r\n    //alert(url);\r\n    //need to use PATCH in Firebase to overwrite (normally PUT)\r\n    console.log(bird);\r\n    fetch(url, {\r\n      method: \"PATCH\",\r\n      \"Content-Type\": \"application/json\",\r\n      body: '{\"sigth'+(birdArray.length+1)+'\":'+JSON.stringify(bird)+'}'\r\n      //TODO: Get the current array length without refreshing the page\r\n    })\r\n      .then(function(response) {\r\n        //response is plain encoded text\r\n        if (response.status !== 200) {\r\n          console.log(\r\n            \"Looks like there was a problem. Status Code: \" + response.status\r\n          );\r\n          return;\r\n        }\r\n        //convert text to json\r\n        response.json().then(function(data) {\r\n          console.log(data);\r\n        });\r\n      })\r\n      .catch(function(err) {\r\n        console.log(\"Fetch Error : \", err);\r\n      });\r\n  }\r\n\r\n};\r\n\r\nexport default NewBird;\r\n","import React, { useState, useEffect } from \"react\";\n//note the bootstrap in public/index.html\n//Example fetch data from Firebase\nconst BirdTable = () => {\n  //Reading two persons from Firebase\n  //data like {\"avi\":{\"city\":\"Vaasa\",\"name\":\"Antti\",\"phone\":\"0401234567\"},\"tka\":{\"city\":\"Vaasa\",\"name\":\"Timo2\",\"phone\":\"0407677080\"}}\n  const [persons, setPersons] = useState({});\n  //Must use useEffect not to forever loop fetch\n  useEffect(() => {\n    fetch(\"https://h2c-react-final-project-default-rtdb.firebaseio.com/birds.json\")\n      .then(function(response) {\n        //response is plain encoded text\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n        //convert text to json\n        response.json().then(function(data) {\n          setPersons(data);\n        });\n      })\n      .catch(function(err) {\n        console.log(\"Fetch Error : \", err);\n      });\n  }, []);\n  //Firebase data is key-value pairs not an array, here converting it first to array\n  const personArray = Array.from(Object.keys(persons), k => persons[k]);\n  //[{\"city\":\"Vaasa\",\"name\":\"Antti\",\"phone\":\"02020202\"},{\"city\":\"Vaasa\",\"name\":\"Timo\",\"phone\":\"0407677080\"}]\n  console.log(personArray);\n  console.log(\"number of sights:\" +personArray.length);\n  const listPersons = personArray.map((person, key) => {\n    return (\n      <div>\n        <h5 class=\"card-title\">\n          Bird: {person.bird} - Date: {person.date} - Place: {person.place} - Quantity: {person.quantity}\n        </h5>\n      </div>\n    );\n  });\n\n  return (\n    <div class=\"card\">\n      <h2>Birds sightings in 2020</h2>\n      <div class=\"card-body\">Total number of sights: {personArray.length}</div>\n      <div class=\"card-body\">{listPersons}</div>\n    </div>\n  );\n};\n\nexport default BirdTable;\n","export default __webpack_public_path__ + \"static/media/birds.41699b6e.jpg\";","import React from \"react\";\nimport Picture from './birds.jpg';\n\nconst ComponentName = (props) => {\n    return <div class=\"borderStyle\">\n      <h1>Bird sighting log {props.year}</h1>\n      <img src={Picture} alt=\"birdwatching\"></img>\n      </div>;\n  };\n\nexport default ComponentName;","import React from 'react';\nimport NewBird from './component/NewBird.jsx'\nimport BirdTable from './component/BirdTable.jsx'\nimport ImageBrowser from './component/ImageBrowser';\nimport './App.css';\nimport {Route,BrowserRouter,Link } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageBrowser year=\"2020\" />    \n      <BrowserRouter>\n      {/* menut */}\n      <p class=\"image\">Image: Creative Commons</p>\n      <nav>\n        <p><Link to=\"/ExistInfo\">Birds you have already seen this year</Link></p>\n        <p><Link to=\"/Addinfo\">Add a new bird sight to your list</Link></p>\n      </nav>\n\n      \n      \n      {/* routing */}\n      <Route path=\"/Addinfo\" exact component={NewBird}/>\n      <Route path=\"/ExistInfo\" exact component={BirdTable}/>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}